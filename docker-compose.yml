version: "3.3"

services:
  reverse-proxy:
    image: traefik
    ports:
      - 80:80
      - 8080:8080
    networks:
      - traefik-net
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "--api"
      - "--api.insecure=true"
      - "--accesslog=true"
      - "--metrics.datadog=true"
      - "--metrics.datadog.addEntryPointsLabels=true"
      - "--tracing.datadog=true"
      - "--tracing.datadog.debug=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--providers.docker.swarmMode"
      - "--providers.docker.watch"
      - "--providers.docker.network=traefik-net"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--entrypoints.postgres.address=:5432"
      - "--entrypoints.redis.address=:6379"
    deploy:
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "3000:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - traefik-net

  database:
    image: postgres:latest
    restart: always
    volumes:
      - db_volume:/var/lib/postgresql/data
      - ./database/seed.sql :/docker-entrypoint-initdb.d/seed.sql
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: healthydrone
    networks:
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.tcp.routers.database.rule=HostSNI(`*`)"
        - "traefik.tcp.routers.database.entryPoints=postgres"
        - "traefik.tcp.services.database.loadbalancer.server.port=5432"
  
  redis:
    image: redis
    container_name: redis
    networks: 
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.tcp.routers.redis.rule=HostSNI(`*`)"
        - "traefik.tcp.routers.redis.entryPoints=redis"
        - "traefik.tcp.services.redis.loadbalancer.server.port=6379"

  kafka:
    image: wurstmeister/kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092
      KAFKA_LISTENERS: INSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "weather-alert:1:1,collision-alert:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik-net
    depends_on:
      - zookeeper
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=false"

  zookeeper:
    image: wurstmeister/zookeeper
    networks: 
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=false"

  manager:
    container_name: manager
    image: n0bis/dronemanager
    environment:
      - ConnectionStrings__AppDbContext=Host=database;Database=healthydrone;Username=pguser;Password=secret;
    networks:
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.manager.rule=PathPrefix(`/manager`)"
        - "traefik.http.routers.manager.entrypoints=web"
        - "traefik.http.services.manager.loadbalancer.server.port=80"
    depends_on:
      - database

  landingpoints:
    container_name: landingpoints
    image: n0bis/landingpoints
    environment:
      - ConnectionStrings__AppDbContext=Host=database;Database=healthydrone;Username=pguser;Password=secret;
    networks:
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.landingpoints.rule=PathPrefix(`/landingpoints`)"
        - "traefik.http.routers.landingpoints.entrypoints=web"
        - "traefik.http.services.landingpoints.loadbalancer.server.port=80"
    depends_on:
      - database

  pathfinding:
    container_name: pathfinding
    image: n0bis/pathfinding
    networks:
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.pathfinding.rule=PathPrefix(`/pathfinding`)"
        - "traefik.http.routers.pathfinding.entrypoints=web"
        - "traefik.http.services.pathfinding.loadbalancer.server.port=80"

  reportincidents:
    container_name: reportincidents
    image: n0bis/reportincidents
    environment:
      - ConnectionStrings__AppDbContext=Host=database;Database=healthydrone;Username=pguser;Password=secret;
    networks:
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.reportincidents.rule=PathPrefix(`/reportincidents`)"
        - "traefik.http.routers.reportincidents.entrypoints=web"
        - "traefik.http.services.reportincidents.loadbalancer.server.port=80"
    depends_on:
      - database

  handlealerts:
    container_name: handlealerts
    image: n0bis/handlealerts
    environment:
      Redis__Host: redis
      Redis__Port: 6379
      Kafka__host: kafka
      Kafka__topic: collision-alert,weather-alert
      Kafka__groupId: test-group
    networks:
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.handlealerts.rule=PathPrefix(`/handlealerts`)"
        - "traefik.http.routers.handlealerts.entrypoints=web"
        - "traefik.http.services.handlealerts.loadbalancer.server.port=80"
    depends_on:
      - redis
      - kafka

  alert_state_machine:
    container_name: alert_state_machine
    image: n0bis/alert_state_machine
    networks:
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=false"

volumes:
  db_volume:

networks:
  traefik-net:
    driver: overlay